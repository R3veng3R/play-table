h1. Play! DataView Module

This module make rendering data in views easier by providing a set of templates tags.

h2. Installation

Install and enable this module as any other "Play! module(Play! Documentation)":http://www.playframework.org/documentation/latest/modules.

h2. DataView templates tags

h3. table

The *table* tag generates a HTML @<table>@. If you pass a list of Play! models all their properties will be displayed:
bc. #{table users /}
You can also precise the set of properties you want to display, by passing a @columns@ parameter containing a map of (label −> property):
bc. #{table users, columns: ['Name':'username', 'Administrator':'isAdmin'] /}

This form may be enough for simple purposes, but you may want to have a better control on the way the properties are displayed. You can define the content of the rows in the body of the tag:
bc. #{table users, as: 'user'}
  #{column 'Name'}
    ${user.username.capitalizeWords()}
  #{/column}
  #{column 'Administrator'}
    ${user.isAdmin?'Yes':'No'}
  #{/column}
#{/table}
The tag body will be executed for each item of the given list, then use the *column* tag to define the content of your table.

You can also set an optional @rowClass@ parameter to add some CSS classes to the @<tr>@ HTML element generated by this tag:
bc. #{table users, rowClass: 'item' /}

Furthermore, each @<tr>@ element will automatically be given a *odd* or *even* class, according to its position in the table.

h3. column

The *column* tag generates a @<td>@ HTML element. It can only be used inside a *table* tag:
bc. #{table users, as: 'user'}
  #{column 'Name'}${user.username}#{/column}
#{/table}

Its first parameter defines the title of the column and it’s body its content.

You can also set an optional @class@ parameter to add some CSS classes to the @<td>@ element:
bc. #{table users, as: 'user'}
  #{column 'Name', class: 'column-name'}${user.username}#{/table}
#{/table}
