h1. Play! DataView Module

This module eases displaying data in views.

h2. Installation

Install and enable this module as any other "Play! module(Play! Documentation)":http://www.playframework.org/documentation/latest/modules.

h2. DataView templates tags

The module just provides a set of templates tags which can be directly used in your Play! views.

h3. table

The *table* tag generates a HTML @<table>@. If you pass it a list of Play! models all their properties will be displayed:

bc. #{table users /}

You can also precise the set of properties you want to display, by passing a @columns@ parameter containing a map of (property −> label):

bc. #{table users, columns: ['fullname':'Name', 'isAdmin':'Administrator'] /}

This form may be enough for simple purposes, but you may want to have a better control on the way the properties are displayed. You can define the content of the rows in the tag body:

bc. #{table users, as: 'user'}
  #{column 'Name'}
    ${user.fullname.capitalizeWords()}
  #{/column}
  #{column 'Administrator'}
    ${user.isAdmin?'Yes':'No'}
  #{/column}
#{/table}

The tag body will be executed for each item of the given list, then use the *column* tag to define the content of your table.

You can also set an optional @class@ parameter to add some CSS classes to the generated @<table>@ HTML element as well as a @rowClass@ parameter to add CSS classes for each @<tr>@ element:

bc. #{table users, class: 'user-table', rowClass: 'user-row' /}

Furthermore, each @<tr>@ element will automatically be given an *odd* or *even* class, according to its position in the item list.

p(note). Without body you can use the *table* tag only with Play! models (ie. any class implementing @play.db.Model@). However, if you provide a body you can use any type.

h3. column

This tag can only be used inside a *table* tag. It generates a @<td>@ HTML element:

bc. #{table users, as: 'user'}
  #{column 'Name'}${user.fullname}#{/column}
#{/table}

Its first parameter defines the title of the column and it’s body its content.

You can also set an optional @class@ parameter to add some CSS classes to the @<td>@ element:

bc. #{table users, as: 'user'}
  #{column 'Name', class: 'user-column-name'}${user.fullname}#{/table}
#{/table}
